@Configuration
public class OkHttpConfig {

    @Bean
    public OkHttpClient.Builder okHttpClientBuilder() {
        try {
            // TrustManager que acepta todos los certificados
            final TrustManager[] trustAllCerts = new TrustManager[] {
                new X509TrustManager() {
                    @Override
                    public void checkClientTrusted(X509Certificate[] chain, String authType)
                        throws CertificateException {
                    }

                    @Override
                    public void checkServerTrusted(X509Certificate[] chain, String authType)
                        throws CertificateException {
                    }

                    @Override
                    public X509Certificate[] getAcceptedIssuers() {
                        return new X509Certificate[0];
                    }
                }
            };

            // Configurar SSLContext
            SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new SecureRandom());
            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

            // Retornar Builder configurado
            return new OkHttpClient.Builder()
                .sslSocketFactory(sslSocketFactory, (X509TrustManager)trustAllCerts[0])
                .hostnameVerifier((hostname, session) -> true)
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS);

        } catch (Exception e) {
            throw new RuntimeException("Error configurando OkHttpClient", e);
        }
    }
}



@Configuration
@EnableRetrofitClients
public class OkHttpConfig {

    @Bean
    public OkHttpClient.Builder okHttpClientBuilder() {
        // ... mismo c√≥digo de arriba
    }
}
